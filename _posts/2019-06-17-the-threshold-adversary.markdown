---
title: The threshold adversary
date: 2019-06-17 06:11:00 -07:00
tags:
- dist101
- models
---

> Power tends to corrupt, and absolute power corrupts absolutely.
> -- <cite> [John Dalberg-Acton 1887](https://en.wikipedia.org/wiki/John_Dalberg-Acton,_1st_Baron_Acton) </cite>


Once we fix the communication model (synchrony, asynchrony, or partial synchrony see [here](https://ittaiab.github.io/2019-05-31-2019-5-31-models/)), we then need to fix the adversary model.

We need some way to limit the power of the adversary corruption. Lets begin with the traditional notion as used in Distributed Computing and Cryptography. 

## Traditional threshold adversary 
The simplest model is that of a _threshold adversary_: given a static group of **_n_** nodes. 

A threshold adversary is an adversary that controls some **_f_** nodes. There are three typical thresholds:
1. $n>f$ where the adversary can control all parties but one. Often called the _dishonest majority_ adversary.
2. $n>2f$ where the adversary controls a minority of the nodes. Often called the _dishonst minority_ adversary.
3. $n>3f$ where the adversary controls less than a third of the nodes. Often called the _dishonst third_ adversary.

## Generalized bounded resource threshold adversary 
In this model the static total _n_ does not represent the number of parties, but a general _bounded resource_ (see Szabo definition of [scarce object](https://nakamotoinstitute.org/scarce-objects/)). A generalized threshold adversary is an adversary that controls some **_fraction_** of this bounded resource. Again, there are three typical thresholds:

1. The adversary can control any amount of the bounded resource (but not all of it).
2. The adversary controls at most a minority of the total resource. Sometimes there is an explicit parameter $\epsilon$ and the assumption is that the adversary controls at most $1/2 - \epsilon$ fraction of the bounded resource.
3. The adversary controls less than $1/3$ (or less than $1/3 - \epsilon$) of the bounded resource. 


Let's consider two common examples of potential bound resources:

1. In Nakamoto Consensus (the consensus mechanism used by Bitcoin), one can consider the resource being the the total CPU power of the participants. The assumption is then that the adversary controls less CPU power than the honest nodes (a minority adversary). In fact, the Nakamoto authors explicitly write the assumption of a resource bounded _minority_ adversary:
> The system is secure as long as honest nodes collectively control more CPU power than any cooperating group of attacker nodes.
> -- <cite>[Bitcoin whitepaper](https://bitcoin.org/bitcoin.pdf) </cite>

2. In systems that use [proof-of-stake](https://www.investopedia.com/terms/p/proof-stake-pos.asp) the assumption is that the bounded resource is some finite set of coins. It is then natural to assume that the adversary controls a threshold of the total coins. On can often map voting power based on relative amount of coins at a given time. For example Tendermint mentions the total voting power of the adversary is bounded by a third:
> it requires that the total voting power of faulty processes is smaller than one third of the total voting power
> -- <cite> [Tendermint whitepaper](https://arxiv.org/pdf/1807.04938.pdf) </cite>


## A note on _stake_ based bounded resources
Basing the security assumption on the adversary controlling a threshold of some set of coins generated by the system has both advantages and disadvantages.
1. On the one hand, using a resource that is controlled by the platform allows to control the resource allocation in ways that are not possible when the resource is external. In particular the platform can  create _punishments mechanisms_ to better incentivise honest behaviour. For example, Buterin suggests conditions to detect malicious behavior and then punish the adversary by reducing (slashing) the offender's stake. See [here](https://medium.com/@VitalikButerin/minimal-slashing-conditions-20f0b500fc6c).
2. On the other hand, if the value of the stake depends on the platform, this may cause some circular reasoning about security and a bootstrapping problem. If the value of the total coins is too high, then the system will loose liveness. If the value of the total coins is initially too low, then an attacker can gain early monopoly power. One option is to bootstrapping proof-of-stake using an existing decentralized high value Proof-of-work coin or high value traditional fiat (see [here](https://bitcoinist.com/visa-paypal-10-million-run-facebook-coin-node/)). This type of solution assumes that the adversary does not already have monopoly power on the bootstrapping resource. 